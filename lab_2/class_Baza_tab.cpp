#include "class_Baza_tab.h"


namespace Baza_tab{

/***************************class Baza_tab***************************************************************************/
/*------------------------------------------------------------------------------------------------------------------*/
Baza_tab::Baza_tab(){
  std::cout << "Default Constructor" << std::endl ;
}
/*------------------------------------------------------------------------------------------------------------------*/

/*------------------------------------------------------------------------------------------------------------------*/
Baza_tab::Baza_tab( double av, double bv, int64_t nv )
  :a(av), b(bv), n(nv), kol_in(0){
  Baza_tab::p = new Point::Point[n] ;
  //std::cout << "Constructor With Parameters" << std::endl ;
}
/*------------------------------------------------------------------------------------------------------------------*/

/*------------------------------------------------------------------------------------------------------------------*/
 Baza_tab::~Baza_tab(){
  if( Baza_tab::p && ( Baza_tab::n > 0 ) ){ delete [] Baza_tab::p ; Baza_tab::n = 0 ; }
  if( Baza_tab::p_in && ( Baza_tab::kol_in > 0 ) ){ delete [] Baza_tab::p_in ; Baza_tab::kol_in = 0 ; }
  std::cout << "Destruct!" << std::endl ;
}
/*------------------------------------------------------------------------------------------------------------------*/

/*------------------------------------------------------------------------------------------------------------------*/
double Baza_tab::A() const {
 return Baza_tab::a ;
}
/*------------------------------------------------------------------------------------------------------------------*/

/*------------------------------------------------------------------------------------------------------------------*/
double Baza_tab::B() const {
  return Baza_tab::b ;
}
/*------------------------------------------------------------------------------------------------------------------*/

/*------------------------------------------------------------------------------------------------------------------*/
double Baza_tab::KOL_IN() const {
  return Baza_tab::kol_in ;
}
/*------------------------------------------------------------------------------------------------------------------*/

/*------------------------------------------------------------------------------------------------------------------*/
int64_t Baza_tab::N() const {
 return Baza_tab::n ;
}
/*------------------------------------------------------------------------------------------------------------------*/

/*------------------------------------------------------------------------------------------------------------------*/
void Baza_tab::P() const {
  for( size_t i = 0 ; i < n ; i++ ){
    std::cout << Baza_tab::p[i].X() << "  " << Baza_tab::p[i].Y() << std::endl ;
  }
}
/*------------------------------------------------------------------------------------------------------------------*/

/*------------------------------------------------------------------------------------------------------------------*/
Point::Point* Baza_tab::Tabul( double ( *f ) ( double x) ){
  double h, x, y ;
  for(size_t i = 0, h = ( Baza_tab::b - Baza_tab::a ) / Baza_tab::n, x = Baza_tab::a ; i < Baza_tab::n ; x += h, i++){
    Baza_tab::p[i] = Point::Point( x, f(x) ) ;
  }
  return p ;

}
/*------------------------------------------------------------------------------------------------------------------*/

/*------------------------------------------------------------------------------------------------------------------*/
void Baza_tab::Tabul_v( double ( *f ) ( double x) ){
  double h, x, y ;
  for( size_t i = 0,  h = ( b - a ) / n, x = a ; i < n ; i++ ){
    p[i] = Point::Point( x, f( x ) ) ;
    x += h ;
  }
}
/*------------------------------------------------------------------------------------------------------------------*/
/***************************class Baza_tab***************************************************************************/

} //namespace Baza_tab

